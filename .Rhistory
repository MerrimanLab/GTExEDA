})
}
shinyApp(ui, server)
getwd()
# Beep test timings
library(shiny)
currentLevel <- 1
currentBeep <- 1
results <- data.frame(level = c(0), beep = c(0), time = Sys.time())
ui <- fluidPage(
fluidRow(
column(4,
wellPanel(
actionButton("btnBeep", "beep"),
actionButton("btnLevel", "level"),
actionButton("btnEnd", "end")
)),
column(4,
verbatimTextOutput("txtLevel"),
verbatimTextOutput("txtBeep"),
verbatimTextOutput("txtEnd"))
)
)
server <- function(input, output) {
beep <- eventReactive(input$btnBeep, {
results <- rbind(results, data.frame(level = currentLevel,
beep = currentBeep,
time = Sys.time()))
currentBeep <<- currentBeep + 1
return (currentBeep)
})
level <- eventReactive(input$btnLevel, {
currentBeep <<- 1
currentLevel <<- currentLevel + 1
return (currentLevel)
})
endTest <- eventReactive(input$btnEnd, {
write.csv(results, "beepResults.csv")
})
output$txtBeep <- renderText({
beep()
})
output$txtLevel <- renderText({
level()
})
output$txtEnd <- renderText({
endTest()
"Test Finished"
})
}
shinyApp(ui, server)
# Beep test timings
library(shiny)
currentLevel <- 1
currentBeep <- 1
results <- data.frame(level = c(0), beep = c(0), time = Sys.time())
ui <- fluidPage(
fluidRow(
column(4,
wellPanel(
actionButton("btnBeep", "beep"),
actionButton("btnLevel", "level"),
actionButton("btnEnd", "end")
)),
column(4,
verbatimTextOutput("txtLevel"),
verbatimTextOutput("txtBeep"),
verbatimTextOutput("txtEnd"))
)
)
server <- function(input, output) {
beep <- eventReactive(input$btnBeep, {
results <<- rbind(results, data.frame(level = currentLevel,
beep = currentBeep,
time = Sys.time()))
currentBeep <<- currentBeep + 1
return (currentBeep)
})
level <- eventReactive(input$btnLevel, {
currentBeep <<- 1
currentLevel <<- currentLevel + 1
return (currentLevel)
})
endTest <- eventReactive(input$btnEnd, {
write.csv(results, "beepResults.csv")
})
output$txtBeep <- renderText({
beep()
})
output$txtLevel <- renderText({
level()
})
output$txtEnd <- renderText({
endTest()
"Test Finished"
})
}
shinyApp(ui, server)
shinyApp(ui, server)
shinyApp(ui, server)
# Beep test timings
library(shiny)
currentLevel <- 1
currentBeep <- 1
results <- data.frame(level = c(0), beep = c(0), time = Sys.time())
ui <- fluidPage(
fluidRow(
column(4,
wellPanel(
actionButton("btnBeep", "beep"),
actionButton("btnLevel", "level"),
actionButton("btnEnd", "end")
)),
column(4,
verbatimTextOutput("txtLevel"),
verbatimTextOutput("txtBeep"),
verbatimTextOutput("txtEnd"))
)
)
server <- function(input, output) {
beep <- eventReactive(input$btnBeep, {
results <<- rbind(results, data.frame(level = currentLevel,
beep = currentBeep,
time = Sys.time()))
currentBeep <<- currentBeep + 1
return (currentBeep)
})
level <- eventReactive(input$btnLevel, {
currentBeep <<- 1
currentLevel <<- currentLevel + 1
return (currentLevel)
})
endTest <- eventReactive(input$btnEnd, {
write.csv(results, "beepResults.csv")
})
output$txtBeep <- renderText({
beep()
})
output$txtLevel <- renderText({
level()
})
output$txtEnd <- renderText({
endTest()
"Test Finished"
})
}
shinyApp(ui, server)
results <- read.csv("beepResults.csv")
head(results)
lag(results$time)
results$time[2] - results$time[1]
results$time <- datetime(results$time)
results$time <- time(results$time)
head(results)
results <- read.csv("beepResults.csv")
results$time <- date(results$time)
results$time <- as.date(results$time)
?as.Date
results$time <- as.Date(results$time)
head(results)
as.difftime(results$time)
results <- read.csv("beepResults.csv")
head(as.difftime(results$time))
head(as.difftime(as.character(results$time)))
head(results)
head(as.Date(results$time, "UTC")
)
head(as.Date(results$time, tz="UTC")
)
head(as.Date(results$time, tz="POSIXlt"))
head(as.POIIXct(results$time))
head(as.POSIXct(results$time))
lag(head(as.POSIXct(results$time)))
xs<-head(as.POSIXct(results$time))
xs[1]
xs[2] - xs[1]
dif(xs)
diff(xs)
results <- read.csv("beepResults.csv")
results$time <- as.POSIXct(results$time)
results$delta <- diff(results$time)
results$delta <- c(NA, diff(results$time))
head(results)
tail(results)
?summarise
library(dplyr)
?summarise
summarise(group_by(results, level), nBeeps = n(), timePerBeep = mean(delta))
by_level <- summarise(group_by(results, level), nBeeps = n(), timePerBeep = mean(delta))
by_level
tail(by_level)
head(by_level, 20)
shiny::runApp('C:/Users/NickBurns/gitRepositories/myGits/LDCalculator/LDExplorer')
library(biomaRt)
library(bioMart)
library(biomart)
library(data.table)
data("iris3")
head(iris3)
irisDF <- iris
irisDT <- as.data.table(iris)
head(irisDF)
head(irisDT)
tail(irisDF)
tail(irisDT)
irisDF[1:10, ]
irisDT[1:10, ]
irisDT[1:10]
irisDF[1:3, 4:5]
irisDT[1:3, 4:5]
irisDT[1:3, .(4,5)]
irisDF[1:3, 4:5]
irisDF[1:3, c("Petal.Width", "Species")]
irisDT[1:3, .("Petal.Width", "Species")]
irisDT[, .("Petal.Width", "Species")]
irisDT[1:3, .(Petal.Width, Species)]
irisDT[seq(1, 150, by=30), .(Petal.Width, Species)]
irisDT[, .(Petal.Length, Petal.Width, Species), by = Species]
irisDT[, .(.N-1, Petal.Length, Petal.Width, Species), by = Species]
irisDT[1, .(Petal.Length, Petal.Width, Species), by = Species]
keys(irisDT)
irisDT.keys()
irisDT.keys
irisDT
setkey(irisDT, Species)
irisDT[Species, mult = "first"]
irisDT[.("setosa", "virginica", "veronica"), mult = "first"]
irisDT[c("setosa", "virginica", "veronica"), mult = "first"]
unique(iris$Species)
irisDT[c("setosa", "virginica", "versicolor"), mult = "first"]
irisDT[, mult = "first"]
irisDT[, mult = "first"]
irisDT[, mult = "first", by=Species]
for (species in unique(iris$Species)) {
irisDF[irisDF$Species == species, ][1, ]
}
for (species in unique(iris$Species)) {
print(irisDF[irisDF$Species == species, ][1, ])
}
sapply(unique(iris$Species), function (species) head(irisDF[irisDF$Species == species, ], 1))
t(sapply(unique(iris$Species), function (species) head(irisDF[irisDF$Species == species, ], 1)))
irisDT[, , by=Species][.N1]
irisDT[, , by=Species][,.N1]
irisDT[, , by=Species][,.N=1]
irisDT[, , by=Species][.N=1]
irisDT[.N=1, , by=Species]
irisDT[, .N=1, by=Species]
irisDT[, .1, by=Species]
irisDT[.1, , by=Species]
irisDT[,,by=Species]
irisDT[,,by=Species][.1]
irisDT[,,by=Species][.N]
irisDT[,,by=Species][mult="first"]
irisDT[,,by=Species][mult="first",by=Species]
irisDT[1,,by=Species]
irisDT[.1,,by=Species]
colMeans(irisDF)
colMeans(irisDF[, -c("Species")])
colMeans(irisDF[, -5])
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
dplyr::summarise(group_by(irisDF, Species), colMeans)
library(dplyr)
dplyr::summarise(group_by(irisDF, Species), colMeans)
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
library(dplyr)
dplyr::summarise(group_by(irisDF, Species),
mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width))
irisDT[, .(mean(Sepal.Width),
mean(Sepal.Length),
mean(Petal.Width),
mean(Petal.Length)), by = Species]
irisDT[, .(mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width)), by = Species]
irisDT[, .(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Petal.Width = mean(Petal.Width)), by = Species]
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
irisDT[,mean,by=species]
irisDT[,mean,by=Species]
irisDT[,mean(),by=Species]
irisDT[,colMeans,by=Species]
irisDT[,colMeans(),by=Species]
colMeans(setosaSubset)
setosaSubset <- irisDF[irisDF$Species == "setosa", ]
colMeans(setosaSubset)
setosaSubset <- irisDF[irisDF$Species == "setosa", -5]
colMeans(setosaSubset)
apply(setosaSubset, 2, sd)
apply(setosaSubset, 2, mean)
apply(setosaSubset, 2, sd)
?split
lapply(split(irisDF, irisDF$Species), colMeans)
lapply(split(irisDF, irisDF$Species),
function (x) colMeans(x[, -5]))
sapply(split(irisDF, irisDF$Species),
function (x) colMeans(x[, -5]))
dplyr::summarise(group_by(irisDF, Species),
mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width))
source('~/.active-rstudio-document', echo=TRUE)
fit
dim(myGTEx)
dim(fData)
head(predict(fit, fData))
names(fit)
dim(fit$rotmat)
fit$rotmat
dim(fit$factors)
length(fit$factors)
dim(fit$loadings)
px <- fData %*% fit$loadings
dim(px)
head(px)
pxs <- apply(px, 1, which.max)
head(pxs)
idx5 <- which(pxs == 5)
head(pxs[idx5])
sum(idx5)
idx2 <- which(pxs == 2)
sum(idx2)
lapply(1:7, function (x) sum(pxs == x))
head(names(pxs)[which(pxs == 2)], 20)
dict
ket(dict)
key(dict)
table(dict[names(pxs)[which(pxs == 2)], SMTS])
dim(fData)
dim(fit$loadings)
dim(fData)
dim(fit$loadings)
loadTissues <- fdata %*% fit$loadings
tissueMax <- apply(loadTissues, 1, which.max)
head(tissueMax)
# number of tissues loading per factor:
unlist(lapply(1:7, function (x) sum(tissueMax == x)))
# tissue types on factor 2:
key(dict)
table(dict[names(tissueMax)[tissueMax == 2]], SMTS)
# tissue types on factor 4:
table(dict[names(tissueMax)[tissueMax == 4]], SMTS)
dim(fData)
dim(fit$loadings)
loadTissues <- fdata %*% fit$loadings
tissueMax <- apply(loadTissues, 1, which.max)
head(tissueMax)
# number of tissues loading per factor:
unlist(lapply(1:7, function (x) sum(tissueMax == x)))
# tissue types on factor 2:
key(dict)
table(dict[names(tissueMax)[tissueMax == 2]], SMTS)
# tissue types on factor 4:
table(dict[names(tissueMax)[tissueMax == 4]], SMTS)
dim(fData)
dim(fit$loadings)
loadTissues <- fData %*% fit$loadings
tissueMax <- apply(loadTissues, 1, which.max)
head(tissueMax)
# number of tissues loading per factor:
unlist(lapply(1:7, function (x) sum(tissueMax == x)))
# tissue types on factor 2:
key(dict)
table(dict[names(tissueMax)[tissueMax == 2]], SMTS)
# tissue types on factor 4:
table(dict[names(tissueMax)[tissueMax == 4]], SMTS)
dim(fData)
dim(fit$loadings)
loadTissues <- fData %*% fit$loadings
tissueMax <- apply(loadTissues, 1, which.max)
head(tissueMax)
# number of tissues loading per factor:
unlist(lapply(1:7, function (x) sum(tissueMax == x)))
# tissue types on factor 2:
key(dict)
table(dict[names(tissueMax)[tissueMax == 2], SMTS])
# tissue types on factor 4:
table(dict[names(tissueMax)[tissueMax == 4], SMTS])
table(dict[names(tissueMax)[tissueMax == 1], SMTS])
table(dict[names(tissueMax)[tissueMax == 5], SMTS])
table(dict[names(tissueMax)[tissueMax == 6], SMTS])
table(dict[names(tissueMax)[tissueMax == 2], SMTS])
plot(table(dict[names(tissueMax)[tissueMax == 2], SMTS]))
plot(log(table(dict[names(tissueMax)[tissueMax == 2], SMTS])))
plot(log(table(dict[names(tissueMax)[tissueMax == 2], SMTS])), las=3)
plot(log(table(dict[names(tissueMax)[tissueMax == 2], SMTS])),
las = 3, ylab = log(N))
plot(log(table(dict[names(tissueMax)[tissueMax == 2], SMTS])),
las = 3, ylab = "log(N)")
plot(table(dict[names(tissueMax)[tissueMax == 6], SMTS]),
las = 3, ylab = "log(N)")
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x)))
}
par(mfrow =c(1, 1))
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
)), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
)), cex.lab = 1, las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
?plot
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
)), ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
)), ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
log2(0)
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
) + 1), ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
) + 1), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTSD]
) + 1), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
setkey(dict, SMTSD)
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTSD]
) + 1), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
dict
setkey(dict, SAMPID)
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTSD]
) + 1), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
setkey(dict, SAMPID)
par(mfrow = c(4, 2))
for (x in 1:7) {
plot(log2(table(
dict[names(tissueMax)[tissueMax == x], SMTS]
) + 1), las = 3, ylab = "log2(N)", main = sprintf("Factor %s", x))
}
par(mfrow =c(1, 1))
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
plotGeneLoadings$GeneColours <- rainbow(10)[cx]
plotGeneLoadings$Cluster <- cx
ggplot(plotGeneLoadings, aes(x = reorder(gene, Cluster), y = loading)) +
geom_bar(stat = "identity", alpha = 0.7, aes(fill = GeneCluster)) +
facet_wrap( ~ Z) + theme_bw() + theme(legend.position = "none")
cx <- cutree(model, k = 8)
plotGeneLoadings$GeneColours <- rainbow(10)[cx]
plotGeneLoadings$Cluster <- cx
ggplot(plotGeneLoadings, aes(x = reorder(gene, Cluster), y = loading)) +
geom_bar(stat = "identity", alpha = 0.7, aes(fill = GeneCluster)) +
facet_wrap( ~ Z) + theme_bw() + theme(legend.position = "none")
cx <- cutree(model, k = 8)
plotGeneLoadings$GeneColours <- rainbow(10)[cx]
plotGeneLoadings$Cluster <- cx
ggplot(plotGeneLoadings, aes(x = reorder(gene, Cluster), y = loading)) +
geom_bar(stat = "identity", alpha = 0.7, aes(fill = GeneColours)) +
facet_wrap( ~ Z) + theme_bw() + theme(legend.position = "none")
cx <- cutree(model, k = 8)
plotGeneLoadings$GeneColours <- rainbow(10)[cx]
plotGeneLoadings$Cluster <- cx
ggplot(plotGeneLoadings, aes(x = reorder(gene, Cluster), y = loading)) +
geom_bar(stat = "identity", alpha = 0.7, aes(fill = GeneColours)) +
facet_wrap( ~ Z) + theme_bw() + theme(legend.position = "none")
