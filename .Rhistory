irisDT[1:10, ]
irisDT[1:10]
irisDF[1:3, 4:5]
irisDT[1:3, 4:5]
irisDT[1:3, .(4,5)]
irisDF[1:3, 4:5]
irisDF[1:3, c("Petal.Width", "Species")]
irisDT[1:3, .("Petal.Width", "Species")]
irisDT[, .("Petal.Width", "Species")]
irisDT[1:3, .(Petal.Width, Species)]
irisDT[seq(1, 150, by=30), .(Petal.Width, Species)]
irisDT[, .(Petal.Length, Petal.Width, Species), by = Species]
irisDT[, .(.N-1, Petal.Length, Petal.Width, Species), by = Species]
irisDT[1, .(Petal.Length, Petal.Width, Species), by = Species]
keys(irisDT)
irisDT.keys()
irisDT.keys
irisDT
setkey(irisDT, Species)
irisDT[Species, mult = "first"]
irisDT[.("setosa", "virginica", "veronica"), mult = "first"]
irisDT[c("setosa", "virginica", "veronica"), mult = "first"]
unique(iris$Species)
irisDT[c("setosa", "virginica", "versicolor"), mult = "first"]
irisDT[, mult = "first"]
irisDT[, mult = "first"]
irisDT[, mult = "first", by=Species]
for (species in unique(iris$Species)) {
irisDF[irisDF$Species == species, ][1, ]
}
for (species in unique(iris$Species)) {
print(irisDF[irisDF$Species == species, ][1, ])
}
sapply(unique(iris$Species), function (species) head(irisDF[irisDF$Species == species, ], 1))
t(sapply(unique(iris$Species), function (species) head(irisDF[irisDF$Species == species, ], 1)))
irisDT[, , by=Species][.N1]
irisDT[, , by=Species][,.N1]
irisDT[, , by=Species][,.N=1]
irisDT[, , by=Species][.N=1]
irisDT[.N=1, , by=Species]
irisDT[, .N=1, by=Species]
irisDT[, .1, by=Species]
irisDT[.1, , by=Species]
irisDT[,,by=Species]
irisDT[,,by=Species][.1]
irisDT[,,by=Species][.N]
irisDT[,,by=Species][mult="first"]
irisDT[,,by=Species][mult="first",by=Species]
irisDT[1,,by=Species]
irisDT[.1,,by=Species]
colMeans(irisDF)
colMeans(irisDF[, -c("Species")])
colMeans(irisDF[, -5])
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
dplyr::summarise(group_by(irisDF, Species), colMeans)
library(dplyr)
dplyr::summarise(group_by(irisDF, Species), colMeans)
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
library(dplyr)
dplyr::summarise(group_by(irisDF, Species),
mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width))
irisDT[, .(mean(Sepal.Width),
mean(Sepal.Length),
mean(Petal.Width),
mean(Petal.Length)), by = Species]
irisDT[, .(mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width)), by = Species]
irisDT[, .(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Petal.Width = mean(Petal.Width)), by = Species]
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
irisDT[,mean,by=species]
irisDT[,mean,by=Species]
irisDT[,mean(),by=Species]
irisDT[,colMeans,by=Species]
irisDT[,colMeans(),by=Species]
colMeans(setosaSubset)
setosaSubset <- irisDF[irisDF$Species == "setosa", ]
colMeans(setosaSubset)
setosaSubset <- irisDF[irisDF$Species == "setosa", -5]
colMeans(setosaSubset)
apply(setosaSubset, 2, sd)
apply(setosaSubset, 2, mean)
apply(setosaSubset, 2, sd)
?split
lapply(split(irisDF, irisDF$Species), colMeans)
lapply(split(irisDF, irisDF$Species),
function (x) colMeans(x[, -5]))
sapply(split(irisDF, irisDF$Species),
function (x) colMeans(x[, -5]))
dplyr::summarise(group_by(irisDF, Species),
mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(100), with = FALSE][, t(log2(.SD + 1))]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
dim(fData)
fit <- factanal(fData, factors = 7)
fit <- factanal(fData, factors = 7)
fit <- factanal(fData, factors = 7)
fit <- factanal(fData, factors = 7)
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(200), with = FALSE][, t(log2(.SD + 1))]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
getFeatures(5)
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(500), with = FALSE][, t(log2(.SD + 1))]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(500), with = FALSE][, t(.SD))]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(500), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(1000), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
?factanal
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(5000), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
fit
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(4000), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(3000), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(2000), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(2500), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(2600), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
getFeatures <- function (K) {
which(colnames(myGTEx) %in% names(features)[1:K])
}
fData <- myGTEx[, getFeatures(4000), with = FALSE][, t(.SD)]
colnames(fData) <- myGTEx[, Description]
head(fData[, 1:10])
fit <- factanal(fData, factors = 7)
NGenes <- 40
plotGeneLoadings <- data.frame(Z = rep(1:7, each = NGenes),
loading = fit$loadings[1:(7 * NGenes)],
gene = rep(myGTEx[, Description], 7))
ggplot(plotGeneLoadings, aes(x = Z, y = loading)) +
geom_text(aes(label = gene, size = loading**2)) +
theme_bw() +
ggtitle("Strength of gene loading by factor") +
theme(legend.position = "none")
library(glmnet)
library(glmnet)
cvfit <- glmnet::cv.glmnet(myGTEx, myGTEx[, ClusterIDs])
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::cv.glmnet(myGTEx, as.integer(myGTEx[, ClusterIDs]))
coef(cvfit, s = "lambda.1se")
as.integer(myGTEx[, ClusterIDs])
library(glmnet)
cvfit <- glmnet::cv.glmnet(myGTEx[, getFeatures(8000)],
as.integer(myGTEx[, ClusterIDs]))
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::cv.glmnet(myGTEx[, getFeatures(5000)],
as.integer(myGTEx[, ClusterIDs]))
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::cv.glmnet(myGTEx[, getFeatures(5000)],
myGTEx[, ClusterIDs])
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::glmnet(myGTEx[, getFeatures(5000)],
myGTEx[, ClusterIDs])
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::glmnet(as.matrix(myGTEx[, getFeatures(5000)]),
myGTEx[, ClusterIDs])
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(5000)]),
myGTEx[, ClusterIDs])
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(5000), with = FALSE]),
myGTEx[, ClusterIDs])
coef(cvfit, s = "lambda.1se")
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(5000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
coef(cvfit, s = "lambda.1se")
head(coef(cvfit, s = "lambda.1se"))
head(coef(cvfit, s = "lambda.1se")[,1])
plot(coef(cvfit, s = "lambda.1se")[,1])
plot(coef(cvfit, s = "lambda.1se")[-1,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
plot(cvCoef[cvCoef > 0])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
idx <- cvCoef > 0
plot(x = names(cvCoef)[idx], y = cvCoef[idx])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
plot(x = names(cvCoef)[idx], y = cvCoef[idx])
names(cvCoef)[idx]
cvCoef[idx]
plot(cvCoef[idx])
data.frame(cvCoef[idx])
cvCoef[idx][,1]
head(data.frame(cvCoef))
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]), aes(x = names(cvCoef), y = cvCoef.idx.) + geom_point()
)
ggplot2::ggplot(data.frame(cvCoef[idx]), aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) + geom_point()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(5000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(5000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(8000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
library(glmnet)
cvfit <- glmnet::cv.glmnet(as.matrix(myGTEx[, getFeatures(2000), with = FALSE]),
as.integer(myGTEx[, ClusterIDs]))
head(coef(cvfit, s = "lambda.1se")[,1])
cvCoef <- coef(cvfit, s = "lambda.1se")[, 1]
names(cvCoef)[1] <- "Intercept"
idx <- cvCoef > 0
ggplot2::ggplot(data.frame(cvCoef[idx]),
aes(x = names(cvCoef[idx]), y = cvCoef.idx.)) +
geom_bar(stat = "identity") +
theme_bw()
