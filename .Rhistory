keys(irisDT)
irisDT.keys()
irisDT.keys
irisDT
setkey(irisDT, Species)
irisDT[Species, mult = "first"]
irisDT[.("setosa", "virginica", "veronica"), mult = "first"]
irisDT[c("setosa", "virginica", "veronica"), mult = "first"]
unique(iris$Species)
irisDT[c("setosa", "virginica", "versicolor"), mult = "first"]
irisDT[, mult = "first"]
irisDT[, mult = "first"]
irisDT[, mult = "first", by=Species]
for (species in unique(iris$Species)) {
irisDF[irisDF$Species == species, ][1, ]
}
for (species in unique(iris$Species)) {
print(irisDF[irisDF$Species == species, ][1, ])
}
sapply(unique(iris$Species), function (species) head(irisDF[irisDF$Species == species, ], 1))
t(sapply(unique(iris$Species), function (species) head(irisDF[irisDF$Species == species, ], 1)))
irisDT[, , by=Species][.N1]
irisDT[, , by=Species][,.N1]
irisDT[, , by=Species][,.N=1]
irisDT[, , by=Species][.N=1]
irisDT[.N=1, , by=Species]
irisDT[, .N=1, by=Species]
irisDT[, .1, by=Species]
irisDT[.1, , by=Species]
irisDT[,,by=Species]
irisDT[,,by=Species][.1]
irisDT[,,by=Species][.N]
irisDT[,,by=Species][mult="first"]
irisDT[,,by=Species][mult="first",by=Species]
irisDT[1,,by=Species]
irisDT[.1,,by=Species]
colMeans(irisDF)
colMeans(irisDF[, -c("Species")])
colMeans(irisDF[, -5])
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
dplyr::summarise(group_by(irisDF, Species), colMeans)
library(dplyr)
dplyr::summarise(group_by(irisDF, Species), colMeans)
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
library(dplyr)
dplyr::summarise(group_by(irisDF, Species),
mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width))
irisDT[, .(mean(Sepal.Width),
mean(Sepal.Length),
mean(Petal.Width),
mean(Petal.Length)), by = Species]
irisDT[, .(mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width)), by = Species]
irisDT[, .(Sepal.Length = mean(Sepal.Length),
Sepal.Width = mean(Sepal.Width),
Petal.Length = mean(Petal.Length),
Petal.Width = mean(Petal.Width)), by = Species]
sapply(unique(irisDF$Species), function (x) colMeans(irisDF[irisDF$Species == x, -5]))
irisDT[,mean,by=species]
irisDT[,mean,by=Species]
irisDT[,mean(),by=Species]
irisDT[,colMeans,by=Species]
irisDT[,colMeans(),by=Species]
colMeans(setosaSubset)
setosaSubset <- irisDF[irisDF$Species == "setosa", ]
colMeans(setosaSubset)
setosaSubset <- irisDF[irisDF$Species == "setosa", -5]
colMeans(setosaSubset)
apply(setosaSubset, 2, sd)
apply(setosaSubset, 2, mean)
apply(setosaSubset, 2, sd)
?split
lapply(split(irisDF, irisDF$Species), colMeans)
lapply(split(irisDF, irisDF$Species),
function (x) colMeans(x[, -5]))
sapply(split(irisDF, irisDF$Species),
function (x) colMeans(x[, -5]))
dplyr::summarise(group_by(irisDF, Species),
mean(Sepal.Length),
mean(Sepal.Width),
mean(Petal.Length),
mean(Petal.Width))
#setwd("~/Google\ Drive/OtagoARF/SAC_DataTable_Pressie")
setwd("C:/Users/NickBurns/Google Drive/OtagoARF/SAC_DataTable_Pressie/")
library(data.table)
gtex <- fread("GTEx_InterestingGenes.csv")
head(colnames(gtex), 20)
gtex[, .(Name, Description, GTEXZXG50005SM57WCN, GTEXZVZQ0006SM51MR8, GTEXZTPG0006SM4YCFG)]
length(unique(gtex[, Description]))
load("targetGenes.Rdata")
setwd("C:\\Users\\NickBurns\\gitRepositories\\myGits\\GTExEDA")
#setwd("~/Documents/GitHub/GTExEDA")
library(data.table)
#dataDir <- "/mnt/DataDrive/GTEXData/%s"
dataDir <- "C:/Users/NickBurns/Downloads/%s"
gtexFile <- sprintf(dataDir, "All_Tissue_Site_Details_Analysis.combined.rpkm.gct")
gtex <- fread(gtexFile)
gtex[1:5, 1:7, with = FALSE]
load("targetGenes.Rdata")
setkey(gtex, Description)
myGTEx <- gtex[targetGenes[, GeneName]]
dictFile <- sprintf(dataDir, "GTEx_Data_V6_Annotations_SampleAttributesDS.txt")
dict <- fread(dictFile)
head(dict[, 1:10, with = F])
dict <- dict[, .(SAMPID, SMTS, SMTSD)]
head(dict)
unique(dict[, SMTS])
table(dict[, SMTS])
unique(dict[, SMTSD])
unique(dict[, SMTS])
library(ggplot2)
ggplot(dict, aes(x = SMTS)) + geom_bar() + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = reorder(SMTS, ..freq..)) + geom_bar() + theme_bw()
)
library(ggplot2)
ggplot(dict, aes(x = reorder(SMTS, ..freq..))) + geom_bar() + theme_bw()
library(ggplot2)
ggplot(dict) + geom_bar(aes(x = reorder(SMTS))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) + geom_bar(aes(x = reorder(SMTS))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) + geom_bar(aes(reorder(SMTS))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) + geom_bar(aes(x = reorder(SMTS, ..freq..))) + theme_bw()
library(ggplot2)
ggplot(dict) + geom_bar(aes(x = reorder(SMTS, ..freq..))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = reorder(SMTS, table(SMTS)))) + geom_bar() + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = reorder(SMTS, table(dict[, SMTS])))) + geom_bar() + theme_bw()
library(ggplot2)
ggplot(dict) +
geom_bar(aes(x = reorder(SMTS, table(dict[, SMTS])))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) +
geom_bar(aes(x = reorder(SMTS, table(dict[, SMTS])))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) +
geom_bar(aes(x = reorder(x, table(dict[, SMTS])))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) +
geom_bar(aes(x = reorder(table(dict[, SMTS])))) + theme_bw()
library(ggplot2)
ggplot(dict, aes(x = SMTS)) +
geom_bar() + theme_bw()
dict[, SMTS] <- factor(dict[, SMTS], levels = unique(dict[, SMTS])[order(table(dict[, SMTS]))])
dict[, SMTS := factor(dict[, SMTS], levels = unique(dict[, SMTS])[order(table(dict[, SMTS]))])]
str(dict)
library(ggplot2)
ggplot(dict, aes(x = SMTS)) +
geom_bar() + theme_bw()
table(dict[, SMTS])
order(table(dict[, SMTS]))
dict[, SMTS := factor(dict[, SMTS], levels = unique(dict[, SMTS])[order(table(dict[, SMTS]))], ordered=T)]
library(ggplot2)
ggplot(dict, aes(x = SMTS)) +
geom_bar() + theme_bw()
unique(dict[, SMTS])
table(dict[, SMTS])[order(table(dict[, SMTS]))]
names(table(dict[, SMTS])[order(table(dict[, SMTS]))])
library(ggplot2)
freqTissues <- table(dict[, SMTS])
tissueOrder <- names(freqTissues[order(freqTissues, decreasing = TRUE)])
dict[, SMTS := factor(.SD[SMTS], levels = tissueOrder, ordered = TRUE)]
ggplot(dict, aes(x = SMTS)) +
geom_bar() + theme_bw()
library(ggplot2)
freqTissues <- table(dict[, SMTS])
tissueOrder <- names(freqTissues[order(freqTissues, decreasing = TRUE)])
dict[, SMTS := factor(.SD[,SMTS], levels = tissueOrder, ordered = TRUE)]
ggplot(dict, aes(x = SMTS)) +
geom_bar() + theme_bw()
library(ggplot2)
freqTissues <- table(dict[, SMTS])
tissueOrder <- names(freqTissues[order(freqTissues, decreasing = TRUE)])
dict[, SMTS := factor(.SD[,SMTS], levels = tissueOrder, ordered = TRUE)]
ggplot(dict, aes(x = SMTS)) +
geom_bar() +
coord_flip() +
theme_bw()
library(ggplot2)
freqTissues <- table(dict[, SMTS])
tissueOrder <- names(freqTissues[order(freqTissues, decreasing = FALSE)])
dict[, SMTS := factor(.SD[,SMTS], levels = tissueOrder, ordered = TRUE)]
ggplot(dict, aes(x = SMTS)) +
geom_bar() +
coord_flip() +
theme_bw()
library(ggplot2)
freqTissues <- table(dict[, SMTS])
tissueOrder <- names(freqTissues[order(freqTissues, decreasing = FALSE)])
dict[, SMTS := factor(.SD[,SMTS], levels = tissueOrder, ordered = TRUE)]
ggplot(dict, aes(x = SMTS)) +
geom_bar(colour = "steelblue") +
coord_flip() +
theme_bw()
library(ggplot2)
freqTissues <- table(dict[, SMTS])
tissueOrder <- names(freqTissues[order(freqTissues, decreasing = FALSE)])
dict[, SMTS := factor(.SD[,SMTS], levels = tissueOrder, ordered = TRUE)]
ggplot(dict, aes(x = SMTS)) +
geom_bar(fill = "steelblue") +
coord_flip() +
theme_bw()
head(myGTEx[, 1:6, with =F])
metaCols = c("Name", "Description")
which(colnames(myGTEx) %in% metaCols)
!which(colnames(myGTEx) %in% metaCols)
which(colnames(myGTEx) !%in% metaCols)
plotDist <- function (X, by = "gene", metaCols = c("Name", "Description")) {
idxMeta <- which(colnames(X) %in% metaCols)
geneNames <- X[, Description]
if (by == "gene") {
X <- t(X[, -idxMeta, with = FALSE])
colnames(X) <- geneNames
}
return(X)
}
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(plotDist(.SD)))]
key(myGTEx)
plotDist <- function (X, by = "gene", metaCols = c("Name", "Description")) {
idxMeta <- which(colnames(X) %in% metaCols)
geneNames <- X[, Description]
if (by == "gene") {
X <- t(X[, -idxMeta, with = FALSE])
colnames(X) <- geneNames
}
return(X)
}
setkey(myGTEx, Description)
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(plotDist(.SD)))]
trasformData <- function (X, by = "gene", metaCols = c("Name", "Description")) {
idxMeta <- which(colnames(X) %in% metaCols)
geneNames <- X[, Description]
if (by == "gene") {
X <- t(X[, -idxMeta, with = FALSE])
colnames(X) <- geneNames
}
return(X)
}
setkey(myGTEx, Description)
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(transformData(.SD)))]
trasformData <- function (X, by = "gene", metaCols = c("Name", "Description")) {
idxMeta <- which(colnames(X) %in% metaCols)
geneNames <- X[, Description]
if (by == "gene") {
X <- t(X[, -idxMeta, with = FALSE])
colnames(X) <- geneNames
}
return(X)
}
setkey(myGTEx, Description)
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(log2(transformData(.SD))))]
transformData <- function (X, by = "gene", metaCols = c("Name", "Description")) {
idxMeta <- which(colnames(X) %in% metaCols)
geneNames <- X[, Description]
if (by == "gene") {
X <- t(X[, -idxMeta, with = FALSE])
colnames(X) <- geneNames
}
return(X)
}
setkey(myGTEx, Description)
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(log2(transformData(.SD))))]
transformData <- function (X, by = "gene", metaCols = c("Name", "Description")) {
idxMeta <- which(colnames(X) %in% metaCols)
geneNames <- X[, Description]
if (by == "gene") {
X <- t(X[, -idxMeta, with = FALSE])
colnames(X) <- geneNames
}
return(X)
}
setkey(myGTEx, Description)
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(transformData(.SD)))]
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(log2(transformData(.SD))))]
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(log2(transformData(.SD) + 0.1)))]
myGTEx[c("ABCG2", "TFP1", "TAL1", "FAXDC2")][, .(boxplot(log2(transformData(.SD) + 1)))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1)))]
log(1000)
log(10)
log2(10)
log2(1)
head(myGTEx[, Description])
?boxplot
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1)),
horizontal = TRUE)]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, srt = 45))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 3))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex = 1))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.names = 1))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.names = 0.5))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.names = 0.1))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.axis = 0.1))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.axis = 0.5))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.axis = 0.7))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.axis = 0.65))]
myGTEx[.(heatmap(log2(transformData(.SD))))]
myGTEx[, .(heatmap(log2(transformData(.SD))))]
logTransform <- function (X)  {
log2(transformData(X) + 1)
}
myGTEx[, .(heatmap(logTransform(.SD))))]
logTransform <- function (X)  {
log2(transformData(X) + 1)
}
myGTEx[, .(heatmap(logTransform(.SD)))]
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), RowV = NA))]
warnings()
?heatmap
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), Rowv = NA))]
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), Colv = NA))]
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), labCol = NA))]
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), labCol = NA, cexRow = 0.6))]
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), cexLab = 0, cexRow = 0.6))]
warnings()
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0, cexRow = 0.6))]
logTransform <- function (X)  {
t(log2(transformData(X) + 1))
}
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0.1, cexRow = 0.6))]
logTransform <- function (X)  {
log2(transformData(X) + 1)
}
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0.1, cexRow = 0.6))]
logTransform <- function (X)  {
log2(transformData(X) + 1)
}
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0.6, Rowv = NA))]
logTransform <- function (X)  {
log2(transformData(X) + 1)
}
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0.6, Rowv = NA, labRow = NA))]
myGTEx[head(myGTEx[, Description])][, .(boxplot(log2(transformData(.SD) + 1),
horizontal = TRUE, las = 1, cex.axis = 0.65))]
head(targetGenes)
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "grey"))]
setkey(targetGenes, GeneName)
dict[, GeneGroup := targetGenes[dict[, Description], GeneColour]]
head(dict[, .(Description, GeneGroup)])
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[mmyGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup]))]
logTransform <- function (X, metaCols = c("Name", "Description"))  {
log2(transformData(X, metaCols = metaCols) + 1)
}
myGTEx[, .(heatmap(logTransform(.SD), cexCol = 0.6, Rowv = NA, labRow = NA))]
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup]))]
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA))]
length(myGTEx[, GeneGroup])
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup]))]
targetGenes[, GeneColour := factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey"))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = myGTEx[, GeneGroup]))]
str(myGTEx[, GeneGroup])
targetGenes[, GeneColour := as.character(factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey")))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = myGTEx[, GeneGroup]))]
str(targetGenes)
#targetGenes[, GeneColour := as.character(factor(GeneGroup, labels = c("darkviolet", "blue", #"steelblue", "magenta", "grey")))]
targetGenes[, GeneColour := rainbow(5)[GeneGroup]]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = myGTEx[, GeneGroup]))]
targetGenes[, GeneColour := as.character(factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey")))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = myGTEx[, GeneGroup]))]
targetGenes[, GeneColour := as.character(factor(GeneGroup, labels = c("darkviolet", "blue", "steelblue", "magenta", "grey")))]
setkey(targetGenes, GeneName)
myGTEx[, GeneGroup := targetGenes[myGTEx[, Description], GeneColour]]
head(myGTEx[, .(Description, GeneGroup)])
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")), cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup]))]
targetGenes
dict
setkey(dict, SAMPID)
tissueColours <- rainbow(50)[as.integer(dict[colnames(myGTEx), SMTS])]
head(tissueColours)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
head(tissueCols)
setkey(dict, SAMPID)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
tissueColours <- rainbow(50)[as.integer(dict[tissueCols, SMTS])]
head(tissueColours)
setkey(dict, SAMPID)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
tissueColours <- rainbow(50)[as.integer(dict[tissueCols, SMTS])]
head(tissueColours)
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")),
cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup],
RowSideColors = tissueColours))]
setkey(dict, SAMPID)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
tissueColours <- rainbow(50)[as.integer(dict[tissueCols, SMTSD])]
head(tissueColours)
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")),
cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup],
RowSideColors = tissueColours))]
head(dict)
setkey(dict, SAMPID)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
tissueColours <- rainbow(70)[as.integer(dict[tissueCols, SMTSD])]
head(tissueColours)
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")),
cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup],
RowSideColors = tissueColours))]
setkey(dict, SAMPID)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
tissueColours <- rainbow(70)[as.integer(as.factor(dict[tissueCols, SMTSD]))]
head(tissueColours)
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")),
cexCol = 0.6, Rowv = NA, labRow = NA,
ColSideColors = .SD[, GeneGroup],
RowSideColors = tissueColours))]
as.integer(as.factor(dict[tissueCols, SMTSD]))
setkey(dict, SAMPID)
metaCols <- c("Name", "Description", "GeneGroup")
tissueCols <- colnames(myGTEx)[-which(colnames(myGTEx) %in% metaCols)]
tissueColours <- rainbow(70)[as.integer(as.factor(dict[tissueCols, SMTSD]))]
head(tissueColours)
myGTEx[, .(heatmap(logTransform(.SD, metaCols = c("Name", "Description", "GeneGroup")),
cexCol = 0.6, Rowv = NULL, labRow = NA,
ColSideColors = .SD[, GeneGroup],
RowSideColors = tissueColours))]
tissueCols
tissueColours
